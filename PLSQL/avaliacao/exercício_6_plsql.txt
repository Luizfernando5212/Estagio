/*EXERCÍCIO 6*/
CREATE OR REPLACE PROCEDURE check_preco_mes(pn_id_pedido      item_pedido.id_pedido%TYPE,
                                            pn_id_produto     item_pedido.id_produto%TYPE,
                                            pn_preco_unitario item_pedido.preco_unitario%TYPE) IS
  ln_preco_mes  item_pedido.preco_unitario%TYPE;
  ln_id_cliente pedido.id_cliente%TYPE;
  ld_mes_pedido VARCHAR2(7);
  le_preco_invalido EXCEPTION;
BEGIN
  --descobre o cliente e o mês em que o pedido foi feito
  SELECT p.id_cliente,
         to_char(p.data_pedido, 'MM-YYYY')
  INTO   ln_id_cliente,
         ld_mes_pedido
  FROM   pedido p
  WHERE  p.id_pedido = pn_id_pedido;

  SELECT i.preco_unitario
  INTO   ln_preco_mes
  FROM   item_pedido i
  JOIN   pedido p
  ON     p.id_pedido = i.id_pedido
  WHERE  to_char(p.data_pedido, 'MM-YYYY') = ld_mes_pedido
  AND    p.id_cliente = ln_id_cliente
  AND    i.id_produto = pn_id_produto
  ORDER  BY p.id_pedido
  FETCH  FIRST 1 ROW ONLY;

  IF (pn_preco_unitario != ln_preco_mes) THEN
    RAISE le_preco_invalido;
  END IF;
EXCEPTION
  -- Quando Nenhum dado foi encontrado, indica que o cliente não comprou determinado produto esse mês
  -- Portanto o insert deve funcionar normalmente
  WHEN NO_DATA_FOUND THEN
    NULL;
  WHEN le_preco_invalido THEN
    raise_application_error(-20000,
                            'Preço inválido: Preço do produto ' ||
                            pn_id_produto || ' esperado para o cliente ' ||
                            ln_id_cliente || ' nesse mês é R$ ' ||
                            to_char(ln_preco_mes, 'fm990D00') ||
                            ' mas foi obtido R$ ' ||
                            to_char(pn_preco_unitario, 'fm990D00'));
  WHEN OTHERS THEN
    raise_application_error(-20001, SQLERRM);
END check_preco_mes;
/

CREATE OR REPLACE TRIGGER preco_mes_trg
  BEFORE INSERT OR UPDATE ON item_pedido
  FOR EACH ROW
BEGIN
  check_preco_mes(:new.id_pedido, :new.id_produto, :new.preco_unitario);
END preco_mes_trg;
/